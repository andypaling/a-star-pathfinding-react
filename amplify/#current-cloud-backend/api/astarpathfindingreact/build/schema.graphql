type Report @aws_iam @aws_api_key {
  id: ID!
  summary: String!
  description: String
  email: AWSEmail
  date: AWSDate!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelReportConnection @aws_api_key @aws_iam {
  items: [Report]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelReportFilterInput {
  id: ModelIDInput
  summary: ModelStringInput
  description: ModelStringInput
  email: ModelStringInput
  date: ModelStringInput
  and: [ModelReportFilterInput]
  or: [ModelReportFilterInput]
  not: ModelReportFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getReport(id: ID!): Report @aws_api_key @aws_iam
  listReports(filter: ModelReportFilterInput, limit: Int, nextToken: String): ModelReportConnection @aws_api_key @aws_iam
  syncReports(filter: ModelReportFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelReportConnection @aws_api_key @aws_iam
}

input CreateReportInput {
  id: ID
  summary: String!
  description: String
  email: AWSEmail
  date: AWSDate!
  _version: Int
}

input UpdateReportInput {
  id: ID!
  summary: String
  description: String
  email: AWSEmail
  date: AWSDate
  _version: Int
}

input DeleteReportInput {
  id: ID
  _version: Int
}

type Mutation {
  createReport(input: CreateReportInput!, condition: ModelReportConditionInput): Report @aws_api_key @aws_iam
  updateReport(input: UpdateReportInput!, condition: ModelReportConditionInput): Report @aws_api_key @aws_iam
  deleteReport(input: DeleteReportInput!, condition: ModelReportConditionInput): Report @aws_api_key @aws_iam
}

input ModelReportConditionInput {
  summary: ModelStringInput
  description: ModelStringInput
  email: ModelStringInput
  date: ModelStringInput
  and: [ModelReportConditionInput]
  or: [ModelReportConditionInput]
  not: ModelReportConditionInput
}

type Subscription {
  onCreateReport: Report @aws_subscribe(mutations: ["createReport"]) @aws_api_key @aws_iam
  onUpdateReport: Report @aws_subscribe(mutations: ["updateReport"]) @aws_api_key @aws_iam
  onDeleteReport: Report @aws_subscribe(mutations: ["deleteReport"]) @aws_api_key @aws_iam
}
